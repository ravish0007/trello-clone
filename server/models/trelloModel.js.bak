const mongoose = require('mongoose')
const uuid = require('uuid').v4

const db = require('../config').db

const url = `mongodb://${db.host}:${db.port}/${db.database}`
mongoose.connect(url)

// ------------------------------------------

const trelloSchema = new mongoose.Schema({
  name: String,
  cards: Array,
  status: Number
})

trelloSchema.set('toJSON', {
  transform: (document, returnedObject) => {
    returnedObject.id = returnedObject._id.toString()
    delete returnedObject._id
    delete returnedObject.__v
    delete returnedObject.status
  }
})
const List = mongoose.model('List', trelloSchema)

// ------------------------------------------

async function fetchAllLists () {
  try {
    const result = await List.find({ status: true })
    return [null, result]
  } catch (error) {
    return [error, null]
  }
}

async function insertList (list) {
  try {
    const newList = new List({ ...list, status: 1 })
    const result = await newList.save()
    return [null, result]
  } catch (error) {
    return [error, null]
  }
}

async function updateList (list) {
  try {
    const result = await List.findByIdAndUpdate(list.id, { name: list.name }, { new: true })
    return [null, result]
  } catch (error) {
    return [error, null]
  }
}

async function deleteList (id) {
  try {
    const result = await List.findByIdAndUpdate(id, { status: 0 })
    return [null, result]
  } catch (error) {
    return [error, null]
  }
}

async function insertCard (listID, card) {
  try {
    const id = uuid()
    const result = await List.findByIdAndUpdate(listID, { $push: { cards: { ...card, id } } })
    return [null, { id }]
  } catch (error) {
    return [error, null]
  }
}

async function updateCard (listID, card) {
  try {
    let result
    if (card.name) {
      result = await List.updateOne({ _id: listID, 'cards.id': card.id },
        { $set: { 'cards.$.name': card.name } }
      )
    }

    if (card.description) {
      result = await List.updateOne({ _id: listID, 'cards.id': card.id },
        { $set: { 'cards.$.description': card.description } }
      )
    }
    return [null, { result: result.acknowledged }]
  } catch (error) {
    return [error, null]
  }
}

async function deleteCard (listID, cardID) {
  try {
    const result = await List.update({ _id: listID }, {
      $pull: {
        cards: { id: cardID }
      }
    })
    return [null, { result: result.acknowledged }]
  } catch (error) {
    return [error, null]
  }
}

async function moveCard (payload) {
  try {
    const list = await List.findOneAndUpdate(
      { _id: payload.listFromID },
      { $pull: { cards: { id: payload.cardSourceID } } },
      { new: false })

    const [removedCard] = list.cards.filter(card => card.id === payload.cardSourceID)

    const result = List.find(
      { _id: payload.listDestinationID }).lean().exec(async function (err, list) {
      const temp = list[0].cards.splice(payload.destinationIndex, 0, removedCard)
      await List.findByIdAndUpdate(payload.listDestinationID, { cards: [...list[0].cards, ...temp] }, { new: true })
    })

    return [null, result]
  } catch (error) {
    return [error, null]
  }
}

module.exports = {
  fetchAllLists,
  insertList,
  updateList,
  deleteList,
  insertCard,
  updateCard,
  deleteCard,
  moveCard
}
